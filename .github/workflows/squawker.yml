name: "Build Squawker."

on:
  workflow_dispatch:

env:
  # JAVA_HOME = /usr/lib/jvm/temurin-11-jdk-amd64
  # ANDROID_SDK_ROOT = /usr/local/lib/android/sdk
  # Setting an environment variable with the value of a configuration variable
  VARIANT: ${{ vars.VARIANT_SQUAWKER }}
  REPO: 'j-fbriere/squawker'
  DEBUG_OFF: '/dev/null'
  # setup colors
  RED_COLOR: '\e[1;31m'
  ORANGE_COLOR: '\e[1;33m'
  BLUE_COLOR: '\e[0;34m'
  BOLD_TEXT: '\e[1m'
  UNSET_COLOR: '\e[0m'
  YAML_DEBUG: 'false'

permissions:
  contents: read

jobs:
  build_job:
    name: Build Job.
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      #- name: "Check Environment."
      #  if: ${{ runner.debug == '1' }}
      #  run: |
      #      env

      - name: "Setup for debugging workflow."
        if: ${{ runner.debug == '1' }}
        run: |
          set -x
          echo -e "set -x\nexport DEBUG_OFF='/dev/stdout'" > ${GITHUB_WORKSPACE}/debug.sh

      - name: "Set-up PATH and update build tools."
        env: 
          PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
          KEYSTORE_TEXT: ${{ secrets.KEYSTORE_TEXT }}
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          echo "/usr/local/lib/android/sdk/tools/bin:/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          sudo -E /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" &> $DEBUG_OFF
          sudo -E /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --update &> $DEBUG_OFF

          echo "APP_NAME=${REPO#*/}" >> "$GITHUB_ENV"
          export APP_NAME="${REPO#*/}"

          echo -e "${PUBLIC_KEY}" | \
            gpg --batch --import &> $DEBUG_OFF

          echo -e "${KEYSTORE_TEXT}" | base64 -d > "${GITHUB_WORKSPACE}/keystore.pkcs"

          if [[ "${VARIANT}" == git ]]; then
            echo "REPO_HEAD=master" >> "$GITHUB_ENV"
          elif [[ "${VARIANT}" == release ]]; then
            echo "REPO_HEAD=$(curl -s "${GITHUB_API_URL}/repos/${REPO}/releases/latest" | jq -r '.tag_name')" >> "$GITHUB_ENV"
          else
            echo "REPO_HEAD=$(curl -s "${GITHUB_API_URL}/repos/${REPO}/tags" | jq -r '.[0] | .name')" >> "$GITHUB_ENV"
          fi

          echo "APPDIR=${GITHUB_WORKSPACE}/${APP_NAME}" >> "$GITHUB_ENV"

      - uses: actions/checkout@v4
        name: "Checkout ${{ env.APP_NAME }} repository."
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.REPO_HEAD }}
          persist-credentials: 'false'
          path: ${{ env.APPDIR }}

      - name: "Install Flutter."
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          # Get flutter version required.
          flutter_version="$(sed -n -E "s/.*flutter-version:\ '(.*)'/\1/p" "${APPDIR}"/.github/workflows/release.yml)"
          
          # Download binaries.
          MANIFEST_BASE_URL="https://storage.googleapis.com/flutter_infra_release/releases"
          MANIFEST=$(curl "${MANIFEST_BASE_URL}/releases_linux.json")

          archive_sha256sum="$(echo "${MANIFEST}" | jq --arg version "$flutter_version" -r '.releases | map(select(.version == $version) | .sha256) | .[]')"

          archive_url="$(echo "${MANIFEST}" | jq --arg version "$flutter_version" -r '.releases | map(select(.version == $version) | .archive) | .[]')"
          archive_name=$(basename "${archive_url}")
          archive_url="${MANIFEST_BASE_URL}/${archive_url}"
          
          archive_local="${RUNNER_TEMP}/${archive_name}"

          cd "${RUNNER_TEMP}"
          echo "${archive_sha256sum}  ${archive_name}" > "${archive_local}.sha256"

          x=1
          while [ $x -le 5 ]; do
            curl --connect-timeout 15 --retry 5 -o "${archive_local}" "${archive_url}" &> $DEBUG_OFF
            sha256sum -c --ignore-missing "${archive_local}".sha256 && break || rm -f "${archive_local}" &> $DEBUG_OFF
            x=$(( $x + 1 ))
          done

          # Install binaries to /opt.
          [[ -f "${archive_local}" ]] && tar xf "${archive_local}" -C "/opt" || exit 1

          # Setup PATH.
          {
            echo "FLUTTER_ROOT=/opt/flutter"
            echo "PUB_CACHE=/opt/flutter/.pub-cache"
          } >>"$GITHUB_ENV"

          {
            echo "/opt/flutter/bin"
            echo "/opt/flutter/bin/cache/dart-sdk/bin"
            echo "/opt/flutter/.pub-cache/bin"
          } >>"$GITHUB_PATH"

          export PATH=$PATH:/opt/flutter/bin:/opt/flutter/bin/cache/dart-sdk/bin:/opt/flutter/.pub-cache/bin

          # Setup Flutter SDK.
          export PUB_CACHE=/opt/flutter/.pub-cache

          flutter config --no-analytics &> $DEBUG_OFF

      - name: Set env
        run: |
          APP_VERSION=$(echo ${REPO_HEAD} | sed 's/v//g')
          echo "APPLICATION_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          APP_BUILD_BASE=300000000
          APP_BUILD_NUMBER=$((GITHUB_RUN_NUMBER*10+GITHUB_RUN_ATTEMPT+APP_BUILD_BASE))
          echo "APPLICATION_BUILD_NUMBER=${APP_BUILD_NUMBER}" >> $GITHUB_ENV

      - name: "Build source and compress APKs."
        env:
            KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
            KEY_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSPHRASE }}
            KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSPHRASE }}
            KEY_PATH: keystore.pkcs
            KEY_ALIAS: ${{ github.actor }}
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          cd "${APPDIR}"
          mv -vf "${GITHUB_WORKSPACE}/keystore.pkcs" "${APPDIR}/android/app/" &> $DEBUG_OFF

          # Create a directory for our release APKs
          mkdir -pv "${GITHUB_WORKSPACE}/apks/" &> $DEBUG_OFF

          flutter pub get &> $DEBUG_OFF
          flutter pub run flutter_oss_licenses:generate.dart &> $DEBUG_OFF
          flutter pub run intl_utils:generate &> $DEBUG_OFF
          flutter build apk --dart-define=app.flavor=github --release --no-tree-shake-icons --split-per-abi --target-platform=android-arm64 --build-name=${{env.APPLICATION_VERSION}} --build-number=${{env.APPLICATION_BUILD_NUMBER}} &> $DEBUG_OFF

          mv -vf build/app/outputs/apk/release/*.apk "${GITHUB_WORKSPACE}/apks/" &> $DEBUG_OFF

          tar -C "${GITHUB_WORKSPACE}/apks" -cf "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.zst" . &> $DEBUG_OFF

          gpg --always-trust -er "${KEY_FINGERPRINT}" \
            -o "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.zst.gpg" \
                "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.zst" &> $DEBUG_OFF

      - name: "Upload compressed APK."
        env:
          SSHKEY: ${{ secrets.SSHKEY }}
          REMOTE: ${{ secrets.REMOTE }}
          HOST: ${{ secrets.HOST }}
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          [[ -f "/home/runner/.ssh/known_hosts" ]] && rm "/home/runner/.ssh/known_hosts" && return 1 || ( mkdir -p "/home/runner/.ssh" && touch "/home/runner/.ssh/known_hosts" )

          echo "$HOST" | tee -a "/home/runner/.ssh/known_hosts" &> $DEBUG_OFF || \
              ( echo -e "${RED_COLOR}${BOLD_TEXT}Failed to append REMOTE to '~/.ssh/known_hosts' - aborting.${UNSET_COLOR}" \
                  && exit 1 )
          echo -e "${BLUE_COLOR}${BOLD_TEXT}REMOTE appended to '~/.ssh/known_hosts' - proceeding.{UNSET_COLOR}"

          chmod -v 0600 "/home/runner/.ssh/known_hosts" &> $DEBUG_OFF && \
            echo -e "${BLUE_COLOR}${BOLD_TEXT}Corrected permissions of '~/.ssh/known_hosts' - proceeding.{UNSET_COLOR}" || \
              ( echo -e "${RED_COLOR}${BOLD_TEXT}Failed to set correct permissions of '~/.ssh/known_hosts' - aborting.${UNSET_COLOR}" \
                  && exit 1 )

          [[ -f "/home/runner/.ssh/id_ed25519" ]] && rm "/home/runner/.ssh/id_ed25519" && return 1 || touch "/home/runner/.ssh/known_hosts"

          echo -e "$SSHKEY" | tee "/home/runner/.ssh/id_ed25519" &> $DEBUG_OFF || \
              ( echo -e "${RED_COLOR}${BOLD_TEXT}Failed to write ssh private key' - aborting.${UNSET_COLOR}" \
                  && exit 1 )

          chmod -v 0600 "/home/runner/.ssh/id_ed25519" &> $DEBUG_OFF          

          if rsync -a -e "ssh -v -i /home/runner/.ssh/id_ed25519" "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.zst.gpg" "${REMOTE}/android/" &> $DEBUG_OFF; then
            echo -e "${BLUE_COLOR}${BOLD_TEXT}Successfully synced files - proceeding.{UNSET_COLOR}"
          else
            echo -e "${RED_COLOR}${BOLD_TEXT}Failed to sync files - aborting.${UNSET_COLOR}"
            return 1
          fi || (exit 1)
