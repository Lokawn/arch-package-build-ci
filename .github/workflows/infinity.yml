name: "Build Infinity for reddit."

on:
  workflow_dispatch:

env:
   JAVA_HOME = ${{ env.JAVA_HOME_17_X64 }}
  # ANDROID_SDK_ROOT = /usr/local/lib/android/sdk
  # Setting an environment variable with the value of a configuration variable
  VARIANT: ${{ vars.VARIANT_INFINITY }}
  REPO: 'Docile-Alligator/Infinity-For-Reddit'
  DEBUG_OFF: '/dev/null'
  # setup colors
  RED_COLOR: '\e[1;31m'
  ORANGE_COLOR: '\e[1;33m'
  BLUE_COLOR: '\e[0;34m'
  BOLD_TEXT: '\e[1m'
  UNSET_COLOR: '\e[0m'

permissions:
  contents: read

jobs:
  build_job:
    name: Build Job.
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      #- name: "Check Environment."
      #  if: ${{ runner.debug == '1' }}
      #  run: |
      #      env

      - name: "Setup for debugging workflow."
        if: ${{ runner.debug == '1' }}
        run: |
          set -x
          echo -e "set -x\nexport DEBUG_OFF='/dev/stdout'" > ${GITHUB_WORKSPACE}/debug.sh

      - name: "Set-up PATH and update build tools."
        env: 
          PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
          KEYSTORE_TEXT: ${{ secrets.KEYSTORE_TEXT }}
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          echo "/usr/local/lib/android/sdk/tools/bin:/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          sudo -E /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" "build-tools;33.0.0" &> $DEBUG_OFF
          sudo -E /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --update &> $DEBUG_OFF

          echo "APP_NAME=${REPO#*/}" >> "$GITHUB_ENV"
          export APP_NAME="${REPO#*/}"

          echo -e "${PUBLIC_KEY}" | \
            gpg --batch --import &> $DEBUG_OFF

          echo -e "${KEYSTORE_TEXT}" | base64 -d > "${GITHUB_WORKSPACE}/keystore.pkcs"

          if [[ "${VARIANT}" == git ]]; then
            echo "REPO_HEAD=master" >> "$GITHUB_ENV"
          elif [[ "${VARIANT}" == release ]]; then
            echo "REPO_HEAD=$(curl -s "${GITHUB_API_URL}/repos/${REPO}/releases/latest" | jq -r '.tag_name')" >> "$GITHUB_ENV"
          else
            echo "REPO_HEAD=$(curl -s "${GITHUB_API_URL}/repos/${REPO}/tags" | jq -r '.[0] | .name')" >> "$GITHUB_ENV"
          fi

          echo "APPDIR=${GITHUB_WORKSPACE}/${APP_NAME}" >> "$GITHUB_ENV"

      - uses: actions/checkout@v4
        name: "Checkout ${{ env.APP_NAME }} repository."
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.REPO_HEAD }}
          persist-credentials: 'false'
          path: ${{ env.APPDIR }}

      - name: "Build source and compress APKs."
        id: main_step
        env:
            REDIRECT_URL: 'http://127.0.0.1'
            API_TOKEN: ${{ secrets.API_TOKEN_INFINITY }}
            USER_AGENT: "android:github_ci-app:0.${{ github.run_number }}.${{ github.run_attempt }} built by ${{ github.actor }}"
            KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
            KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}
            ANDROID_NDK_HOME: '/usr/local/lib/android/sdk/ndk/26.1.10909125'
            ANDROID_NDK: '/usr/local/lib/android/sdk/ndk/26.1.10909125'
            ANDROID_NDK_ROOT: '/usr/local/lib/android/sdk/ndk/26.1.10909125'
            KEYSTORE_PKCS: ${{ github.workspace }}/keystore.pkcs
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          cd "${APPDIR}"

          apiutils_file="${APPDIR}/app/src/main/java/ml/docilealligator/infinityforreddit/utils/APIUtils.java"

          app_build_gradle_file="${APPDIR}/app/build.gradle"

          if [[ -n "${API_TOKEN}" ]]; then
            sed -i -e "s#\"NOe2iKrPPzwscA\"#\"${API_TOKEN}\"#" \
                -e "s#\"infinity://localhost\"#\"${REDIRECT_URL}\"#" \
                -e "s#public static final String USER_AGENT = \".*\";#public static final String USER_AGENT = \"${USER_AGENT}\";#" "${apiutils_file}"  &> $DEBUG_OFF

            string1="release {\n            minifyEnabled false"
            string2="minifiedRelease {\n            initWith buildTypes.release"
            string3="}\n    buildTypes {\n        release {"
            newstring1="release {\n            signingConfig signingConfigs.release\n            minifyEnabled false"
            newstring2="minifiedRelease {\n            signingConfig signingConfigs.release\n            initWith buildTypes.release"
            newstring3="}\n    signingConfigs {\n        release {\n            storeFile new File(System.getenv()[\"KEYSTORE_PKCS\"])\n            storePassword System.getenv()[\"KEYSTORE_PASSPHRASE\"]\n            keyAlias System.getenv()[\"GITHUB_ACTOR\"]\n            keyPassword System.getenv()[\"KEYSTORE_PASSPHRASE\"]\n        }\n    }\n    buildTypes {\n        release {"

            perl -i -0777 -pe "s/$string1/$newstring1/;\
                s/$string2/$newstring2/;\
                s/$string3/$newstring3/" \
                "${app_build_gradle_file}"

            mkdir -vp "${GITHUB_WORKSPACE}/apks" &> $DEBUG_OFF
            [[ "${RUNNER_DEBUG}" == 1 ]] && cp -vaf "${apiutils_file}" "${GITHUB_WORKSPACE}/apks" &> $DEBUG_OFF

            if [[ "${RUNNER_DEBUG}" == 1 ]]; then
                ./gradlew assembleRelease assembleMinifiedRelease \
                    |& tee "${GITHUB_WORKSPACE}/apks/build_${APP_NAME}.log" &> $DEBUG_OFF
            else
                ./gradlew assembleRelease assembleMinifiedRelease &> $DEBUG_OFF
            fi

            export APPLICATION_VERSION=$(echo ${REPO_HEAD} | sed 's/v//g')
            echo "APPLICATION_VERSION=${APPLICATION_VERSION}" >> $GITHUB_ENV

            for type in minifiedRelease/*.apk release/*.apk; do
              mv -vf ${APPDIR}/app/build/outputs/apk/${type} "${GITHUB_WORKSPACE}/apks/" &> $DEBUG_OFF
            done
            tar -C "${GITHUB_WORKSPACE}/apks" -cf "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.gz" . &> $DEBUG_OFF

            gpg --always-trust -er "${KEY_FINGERPRINT}" \
              -o "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.gz.gpg" \
                "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.gz" &> $DEBUG_OFF

            echo "${APP_NAME}_UPSTREAM_BUILD=false" >> "$GITHUB_ENV"
          else
            printf "${ORANGE_COLOR}NOTE: API_TOKEN not provided, building upstream apks.${UNSET_COLOR}\n\n"
            ./gradlew assemble &> $DEBUG_OFF
            echo "${APP_NAME}_UPSTREAM_BUILD=true" >> "$GITHUB_ENV"
          fi

      - name: "Upload build.gradle to artifact."  
        if: ${{ failure() && steps.main_step.outcome == 'failure' }}
        env:
            KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          env > "${GITHUB_WORKSPACE}/apks/env"

          cp -avf "${APPDIR}/app/build.gradle" "${GITHUB_WORKSPACE}/apks" &> $DEBUG_OFF
          cp -vaf "${apiutils_file}" "${GITHUB_WORKSPACE}/apks" &> $DEBUG_OFF

          tar -C "${GITHUB_WORKSPACE}/apks" -cf "${APPDIR}-artifacts_${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar" .  &> $DEBUG_OFF

          gpg --always-trust -er "${KEY_FINGERPRINT}" \
              -o "${APPDIR}-artifacts_${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.gpg" \
                "${APPDIR}-artifacts_${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar"
                mv "${APPDIR}-artifacts_${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar" &> $DEBUG_OFF

      - uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.main_step.outcome == 'failure' }}
        name: Upload ${{ env.APP_NAME }} build failure artifacts.
        with:
          name: ${{ env.APP_NAME }} artifacts
          path: |
            ${{ env.APPDIR }}-artifacts_${{ github.run_number }}.${{ github.run_attempt }}.tar.gpg

      - uses: actions/upload-artifact@v4
        # ${{ env.${{ env.APP_NAME }}_UPSTREAM_BUILD == yes }}, nesting doesn't work.
        if: ${{ steps.main_step.outcome == 'success' && env[format('{0}_UPSTREAM_BUILD', env.APP_NAME)] == 'true' }}
        name: Upload ${{ env.APP_NAME }} upstream APKs as artifact.
        with:
          name: ${{ env.APP_NAME }} upstream APKs
          path: |
            ${{ env.APPDIR }}/app/build/outputs/apk/*/*.apk

#      - uses: actions/upload-artifact@v4
#        if: ${{ steps.main_step.outcome == 'success' && env[format('{0}_UPSTREAM_BUILD', env.APP_NAME)] == 'false' }}
#        name: Upload ${{ env.APP_NAME }} APKs as artifact.
#        with:
#          name: ${{ env.APP_NAME }} APKs
#          path: |
#            ${{ env.APPDIR }}-apks_${{ github.run_number }}.${{ github.run_attempt }.tar.gz.gpg

      - name: "Upload compressed APK."
        if: ${{ steps.main_step.outcome == 'success' && env[format('{0}_UPSTREAM_BUILD', env.APP_NAME)] == 'false' }}
        id: rsync
        env:
          SSHKEY: ${{ secrets.SSHKEY }}
          REMOTE: ${{ secrets.REMOTE }}
          HOST: ${{ secrets.HOST }}
        run: |
          [[ -f "${GITHUB_WORKSPACE}/debug.sh" ]] && source "${GITHUB_WORKSPACE}/debug.sh"

          [[ -f "/home/runner/.ssh/known_hosts" ]] && rm "/home/runner/.ssh/known_hosts" && return 1 || ( mkdir -p "/home/runner/.ssh" && touch "/home/runner/.ssh/known_hosts" )

          echo "$HOST" | tee -a "/home/runner/.ssh/known_hosts" &> $DEBUG_OFF || \
              ( echo -e "${RED_COLOR}${BOLD_TEXT}Failed to append REMOTE to '~/.ssh/known_hosts' - aborting.${UNSET_COLOR}" \
                  && exit 1 )
          echo -e "${BLUE_COLOR}${BOLD_TEXT}REMOTE appended to '~/.ssh/known_hosts' - proceeding.${UNSET_COLOR}"

          chmod -v 0600 "/home/runner/.ssh/known_hosts" &> $DEBUG_OFF && \
            echo -e "${BLUE_COLOR}${BOLD_TEXT}Corrected permissions of '~/.ssh/known_hosts' - proceeding.${UNSET_COLOR}" || \
              ( echo -e "${RED_COLOR}${BOLD_TEXT}Failed to set correct permissions of '~/.ssh/known_hosts' - aborting.${UNSET_COLOR}" \
                  && exit 1 )

          [[ -f "/home/runner/.ssh/id_ed25519" ]] && rm "/home/runner/.ssh/id_ed25519" && return 1 || touch "/home/runner/.ssh/known_hosts"

          echo -e "$SSHKEY" | tee "/home/runner/.ssh/id_ed25519" &> $DEBUG_OFF || \
              ( echo -e "${RED_COLOR}${BOLD_TEXT}Failed to write ssh private key' - aborting.${UNSET_COLOR}" \
                  && exit 1 )

          chmod -v 0600 "/home/runner/.ssh/id_ed25519" &> $DEBUG_OFF          

          if rsync -a -e "ssh -v -i /home/runner/.ssh/id_ed25519" "${APPDIR}-apks_${APPLICATION_VERSION}-${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}.tar.gz.gpg" "${REMOTE}/android/" &> $DEBUG_OFF; then
            echo -e "${BLUE_COLOR}${BOLD_TEXT}Successfully synced files - proceeding.${UNSET_COLOR}"
          else
            echo -e "${RED_COLOR}${BOLD_TEXT}Failed to sync files - aborting.${UNSET_COLOR}"
            exit 1
          fi || (exit 1)

      - uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.main_step.outcome == 'success' && env[format('{0}_UPSTREAM_BUILD', env.APP_NAME)] == 'false' && steps.rsync.outcome == 'failure' }}
        name: Upload ${{ env.APP_NAME }} APKs as artifact as rsync failed.
        with:
          name: ${{ env.APP_NAME }} APKs
          path: |
            ${{ env.APPDIR }}-apks_${{ env.APPLICATION_VERSION }}-${{ github.run_number }}.${{ github.run_attempt }}.tar.gz.gpg
