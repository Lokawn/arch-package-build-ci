name: "Build Infinity for reddit."

on:
  workflow_dispatch:

env:
  # JAVA_HOME = /usr/lib/jvm/temurin-11-jdk-amd64
  # ANDROID_SDK_ROOT = /usr/local/lib/android/sdk
  # Setting an environment variable with the value of a configuration variable
  VARIANT: ${{ vars.VARIANT_INFINITY }}
  REPO: 'Docile-Alligator/Infinity-For-Reddit'
  DEBUG_OFF: '/dev/null'
  # setup colors
  RED_COLOR: '\e[1;31m'
  ORANGE_COLOR: '\e[1;33m'
  BLUE_COLOR: '\e[0;34m'
  BOLD_TEXT: '\e[1m'
  UNSET_COLOR: '\e[0m'
  YAML_DEBUG: false

permissions:
  contents: read

jobs:
  build_job:
    name: Build Job.
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: "Setup for debugging workflow."
        if: ${{ runner.debug == '1' }}
        run: |
          set -x
          echo -e "set -x\nexport DEBUG_OFF='/dev/stdout'" > ${GITHUB_WORKSPACE}/debug.sh

      - name: "Set-up PATH and update build tools."
        env: 
          PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
        run: |
          [[ -f ${GITHUB_WORKSPACE}/debug.sh ]] && source ${GITHUB_WORKSPACE}/debug.sh

          echo "/usr/local/lib/android/sdk/tools/bin:/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          sudo -E /usr/local/lib/android/sdk/tools/bin/sdkmanager "platforms;android-33" "build-tools;33.0.0" &> $DEBUG_OFF
          sudo -E /usr/local/lib/android/sdk/tools/bin/sdkmanager --update &> $DEBUG_OFF

          echo "APP_NAME=${REPO#*/}" >> "$GITHUB_ENV"
          echo -e "${PUBLIC_KEY}" | \
            gpg --batch --import &> $DEBUG_OFF            

      - name: "Checkout ${{ env.APP_NAME }} repository."
        if: ${{ env.VARIANT == 'git' }}
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          show-progress: false
          repository: ${{ env.REPO }}
          path: ${{ env.APP_NAME }}

      - name: "Fetch source archive."
        if: ${{ env.VARIANT != 'git' }}
        run: |
          [[ -f ${GITHUB_WORKSPACE}/debug.sh ]] && source ${GITHUB_WORKSPACE}/debug.sh

          printf "${ORANGE_COLOR}NOTE: Using git archive as source.${UNSET_COLOR}\n"

          latest_tag=$(curl -s "${GITHUB_API_URL}/repos/${REPO}/releases/latest" \
            | grep "\"tag_name\":" | cut -d \" -f 4)

          latest_url="https://github.com/${REPO}/archive/refs/tags/${latest_tag}.tar.gz"

          wget -O "${APP_NAME}.tar.gz" "${latest_url}" &> $DEBUG_OFF && \
          tar xf "${APP_NAME}.tar.gz" &> $DEBUG_OFF && \
          mv -vf "${APP_NAME}-${latest_tag#*v}" "${APP_NAME}" &> $DEBUG_OFF && \
          rm -vf "${APP_NAME}.tar.gz" &> $DEBUG_OFF

      - name: "Build source and compress APKs."
        if: ${{env.YAML_DEBUG == false }}
        env:
            REDIRECT_URL: 'http://127.0.0.1'
            API_TOKEN: ${{ secrets.API_TOKEN_INFINITY }}
            USER_AGENT: "android:github_ci-app:0.${{ github.run_number }}.${{ github.run_attempt }} built by ${{ github.actor }}"
            KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
            KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}
            KEYSTORE_TEXT: ${{ secrets.KEYSTORE_TEXT }}
        run: |
          [[ -f ${GITHUB_WORKSPACE}/debug.sh ]] && source ${GITHUB_WORKSPACE}/debug.sh

          export APPDIR="${GITHUB_WORKSPACE}/${APP_NAME}"
          echo "APPDIR=${GITHUB_WORKSPACE}/${APP_NAME}" >> "$GITHUB_ENV"

          cd "${APPDIR}"

          apiutils_file="${APPDIR}/app/src/main/java/ml/docilealligator/infinityforreddit/utils/APIUtils.java"

          if [[ -n "${API_TOKEN}" ]]; then
            sed -i -e "s#\"NOe2iKrPPzwscA\"#\"${API_TOKEN}\"#" \
                -e "s#\"infinity://localhost\"#\"${REDIRECT_URL}\"#" \
                -e "s#public static final String USER_AGENT = \".*\";#public static final String USER_AGENT = \"${USER_AGENT}\";#" "${apiutils_file}"  &> $DEBUG_OFF

            echo -e "${KEYSTORE_TEXT}" | base64 -d > ${GITHUB_WORKSPACE}/keystore.pkcs
            export KEYSTORE_PKCS="${GITHUB_WORKSPACE}/keystore.pkcs"

            string1="release {\n            minifyEnabled false"
            string2="minifiedRelease {\n            initWith buildTypes.release"
            string3="}\n    buildTypes {\n        release {"
            newstring1="release {\n        signingConfig signingConfigs.release\n        minifyEnabled false"
            newstring2="minifiedRelease {\n        signingConfig signingConfigs.release\n        initWith buildTypes.release"
            newstring3="}\n    signingConfigs {\n    release {\n        storeFile new File(System.getenv("KEYSTORE_PKCS"))\n        storePassword System.getenv("KEYSTORE_PASSPHRASE")\n        keyAlias System.getenv("GITHUB_ACTOR")\n        keyPassword System.getenv("KEYSTORE_PASSPHRASE")\n    }\n    }\n    buildTypes {\n    release {"
            
            perl -i -0777 -pe "s/$string1/$newstring1/;\ 
                s/$string2/$newstring2/;\
                s/$string3/$newstring3/" build.gradle

            export ANDROID_NDK_HOME="${ANDROID_NDK_LATEST_HOME}"
            export ANDROID_NDK"=${ANDROID_NDK_LATEST_HOME}"
            export ANDROID_NDK_ROOT="${ANDROID_NDK_LATEST_HOME}"

            ./gradlew assembleRelease &> $DEBUG_OFF
            ./gradlew assembleMinifiedRelease &> $DEBUG_OFF

            mkdir -vp "${GITHUB_WORKSPACE}/apks" &> $DEBUG_OFF
            cp -vaf "${apiutils_file}" "${GITHUB_WORKSPACE}/apks" &> $DEBUG_OFF

            for type in minifiedRelease/*.apk release/*.apk; do
              mv -vf ${APPDIR}/app/build/outputs/apk/${type} "${GITHUB_WORKSPACE}/apks/" &> $DEBUG_OFF
            done
            tar -C "${GITHUB_WORKSPACE}/apks" -cf "${APPDIR}-apks.tar.zst" .  &> $DEBUG_OFF

            gpg --always-trust -er "${KEY_FINGERPRINT}" \
              -o "${APPDIR}-apks.tar.zst.gpg" \
                "${APPDIR}-apks.tar.zst" &> $DEBUG_OFF

            echo "${APP_NAME}_UPSTREAM_BUILD=false" >> "$GITHUB_ENV"
          else
            printf "${ORANGE_COLOR}NOTE: API_TOKEN not provided, building upstream apks.${UNSET_COLOR}\n\n"
            ./gradlew assemble &> $DEBUG_OFF
            echo "${APP_NAME}_UPSTREAM_BUILD=true" >> "$GITHUB_ENV"
          fi

      - uses: actions/upload-artifact@v3
        # ${{ env.${{ env.APP_NAME }}_UPSTREAM_BUILD == yes }}, nesting doesn't work.
        if: ${{ env[format('{0}_UPSTREAM_BUILD', env.APP_NAME)] == 'true' }}
        name: Upload ${{ env.APP_NAME }} upstream APKs as artifact.
        with:
          name: ${{ env.APP_NAME }} upstream APKs
          path: |
            ${{ env.APPDIR }}/app/build/outputs/apk/*/*.apk

      - uses: actions/upload-artifact@v3
        if: ${{ ! env[format('{0}_UPSTREAM_BUILD', env.APP_NAME)] == 'false' }}
        name: Upload ${{ env.APP_NAME }} APKs as artifact.
        with:
          name: ${{ env.APP_NAME }} APKs
          path: |
            ${{ env.APP_DIR }}-apks.tar.zst.gpg

#      - name: "Upload compressed APK."
#        if: ${{ env.APK_VARIANT_DEFAULT != 'true' }}
#        env:
#          SSHKEY: ${{ secrets.SSHKEY }}
#          REMOTE: ${{ secrets.REMOTE_ANDROID }}
#          HOST: ${{ secrets.HOST }}
#        run: |
#          [[ -f ${GITHUB_WORKSPACE}/debug.sh ]] && source ${GITHUB_WORKSPACE}/debug.sh

#          if ! grep -Fxq "$HOST" "/home/runner/.ssh/known_hosts" &> $DEBUG_OFF; then
#            if ! echo "$HOST" | tee -a "/home/runner/.ssh/known_hosts" &> $DEBUG_OFF; then
#              echo -e "${RED_COLOR}${BOLD_TEXT}Failed to append REMOTE to '~/.ssh/known_hosts' - aborting.${UNSET_COLOR}"
#              exit 1
#            fi
#            echo -e "${BLUE_COLOR}${BOLD_TEXT}REMOTE appended to '~/.ssh/known_hosts' - proceeding.{UNSET_COLOR}"

#            chmod -v 0600 "/home/runner/.ssh/known_hosts" &> $DEBUG_OFF && \
#              echo -e "${BLUE_COLOR}${BOLD_TEXT}Corrected permissions of '~/.ssh/known_hosts' - proceeding.{UNSET_COLOR}" || \
#                (echo -e "${RED_COLOR}${BOLD_TEXT}Failed to set correct permissions of '~/.ssh/known_hosts' - aborting.${UNSET_COLOR}" \
#                  && exit 1 )
#          fi

#          if [[ -f "/home/runner/.ssh/id_ed25519" ]]; then
#            echo -e "$SSHKEY" | tee "/home/runner/.ssh/id_ed25519.bak" &> $DEBUG_OFF
#            if ! diff "/home/runner/.ssh/id_ed25519" "/home/runner/.ssh/id_ed25519.bak" &> $DEBUG_OFF; then
#              mv -v "/home/runner/.ssh/id_ed25519.bak" "/home/runner/.ssh/id_ed25519" &> $DEBUG_OFF
#              echo -e "${BLUE_COLOR}${BOLD_TEXT}Private SSH Key created - proceeding.{UNSET_COLOR}"
#            fi
#          else
#            echo -e "$SSHKEY" | tee "/home/runner/.ssh/id_ed25519" &> $DEBUG_OFF
#            echo -e "${BLUE_COLOR}${BOLD_TEXT}Private SSH Key created - proceeding.{UNSET_COLOR}"
#          fi

#          chmod -v 0600 "/home/runner/.ssh/id_ed25519" &> $DEBUG_OFF

#          if rsync -a --delete -e "ssh -v -i /home/runner/.ssh/id_ed25519" "$GITHUB_WORKSPACE/repo/" "$REMOTE" &> $DEBUG_OFF; then
#            echo -e "${BLUE_COLOR}${BOLD_TEXT}Successfully synced files - proceeding.{UNSET_COLOR}"
#          else
#            echo -e "${RED_COLOR}${BOLD_TEXT}Failed to sync files - aborting.${UNSET_COLOR}"
#            return 1
#          fi || (exit 1)
