name: "Convert Files."

on:
  workflow_dispatch:

env:
  DEBUG_OFF: '/dev/null'
  # setup colors
  RED_COLOR: '\e[1;31m'
  ORANGE_COLOR: '\e[1;33m'
  BLUE_COLOR: '\e[0;34m'
  BOLD_TEXT: '\e[1m'
  UNSET_COLOR: '\e[0m'

permissions:
  contents: read

jobs:
  build_job:
    name: Build Job.
    runs-on: ubuntu-latest
    container: fedora:rawhide
    defaults:
      run:
        shell: bash

    steps:
      - name: "Setup for debugging workflow."
        if: ${{ runner.debug == '1' }}
        run: |
          set -x
          echo -e "set -x\nexport DEBUG_OFF='/dev/stdout'" > $HOME/debug.sh

      - name: "Set-up PATH and update tools."
        run: |
          [[ -f "$HOME/debug.sh" ]] && source "$HOME/debug.sh"

          echo "/usr/bin:/usr/sbin:/bin:/sbin" >> $GITHUB_PATH

          sudo dnf --assumeyes upgrade &> $DEBUG_OFF
          sudo dnf --assumeyes install ocrmypdf jq &> $DEBUG_OFF

          echo "keyserver hkps://keys.openpgp.org" > \
            tee "$HOME/.gnupg/gpg.conf" &> $DEBUG_OFF
          mkdir "$HOME/enc"

      - name: "Get File(s)."
        env:
          URL: ${{ vars.URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
        run: |
          [[ -f "$HOME/debug.sh" ]] && source "$HOME/debug.sh"

          cd "$HOME/enc"

          wget --content-disposition "${URL}" &> $DEBUG_OFF || \
            (echo -e "${RED_COLOR}${BOLD_TEXT}Failed to download file - aborting." && exit 1)

          while ! gpg --list-secret-key | grep "$KEY_FINGERPRINT" &> $DEBUG_OFF; do
            echo -e "$PRIVATE_KEY" | gpg --batch --import &> $DEBUG_OFF
          done

          echo"${PASSPHRASE}" | gpg --pinentry-mode loopback \
            --passphrase-fd 0  --decrypt-files "$HOME/enc/"*.pdf.gpg &> $DEBUG_OFF || \
            ( echo -e "${RED_COLOR}${BOLD_TEXT}Failed to decrypt file - aborting." && exit 1 )

      - name: "OCR File(s)."
        run: |
          [[ -f "$HOME/debug.sh" ]] && source "$HOME/debug.sh"

          cd  "$HOME/enc"
          mkdir tmp output
          export TMPDIR=tmp

          for pdf_file in *.pdf; do
          parallel --tag -j 2 ocrmypdf --sidecar 'output/{}'.txt --deskew \
            --optimize 1 '{}' 'output/{}' ::: "${pdf_file}" &> $DEBUG_OFF
          done

      - name: "Encrypt PDF File(s)."
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
          KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
        run: |
          [[ -f "$HOME/debug.sh" ]] && source "$HOME/debug.sh"

          cd  "$HOME/enc"

          tar -C "$HOME/enc/output" -cf "output.tar.gz" . &> $DEBUG_OFF

          gpg --always-trust -er "${KEY_FINGERPRINT}" -o "output.tar.gz.gpg" "output.tar.gz" || \
            (echo -e "${RED_COLOR}${BOLD_TEXT}Failed to encrypt file - aborting." && exit 1)

      - name: "Upload File."
        run: |
          [[ -f "$HOME/debug.sh" ]] && source "$HOME/debug.sh"

          cd  "$HOME/enc"

          while ! curl -F "file=@output.tar.gz.gpg" https://file.io | jq >> "${GITHUB_STEP_SUMMARY}"; do
            echo -e "${ORANGE_COLOR}${BOLD_TEXT}Failed to encrypt file - retrying.${UNSET_COLOR}"
          done
