name: "Convert Files."

on:
  workflow_dispatch:

env:
  DEBUG_OFF: '/dev/null'
  # setup colors
  RED_COLOR: '\e[1;31m'
  ORANGE_COLOR: '\e[1;33m'
  BLUE_COLOR: '\e[0;34m'
  BOLD_TEXT: '\e[1m'
  UNSET_COLOR: '\e[0m'

permissions:
  contents: read

jobs:
  build_job:
    name: Build Job.
    runs-on: ubuntu-latest
    container: alpine:edge

    steps:
      - name: "Setup for debugging workflow."
        if: ${{ runner.debug == '1' }}
        run: |
          set -x
          printf "set -x\nexport DEBUG_OFF='/dev/stdout'" > "$HOME/debug.sh"

      - name: "Set-up PATH and update tools."
        run: |
          [ -f "$HOME/debug.sh" ] && . "$HOME/debug.sh"

          echo "/usr/bin:/usr/sbin:/bin:/sbin" >> $GITHUB_PATH

          status=1
          until [ $status = 0 ]; do
            apk update 2>&1 $DEBUG_OFF && \
            apk add ocrmypdf jq wget curl parallel 2>&1 $DEBUG_OFF
            status=$?
          done

          echo "keyserver hkps://keys.openpgp.org" | tee "$HOME/.gnupg/gpg.conf" 2>&1 $DEBUG_OFF
          mkdir "$HOME/enc"
          ocrpdf 

      - name: "Get File(s)."
        env:
          URL: ${{ vars.URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
        run: |
          [ -f "$HOME/debug.sh" ] && . "$HOME/debug.sh"

          cd "$HOME/enc"

          wget --content-disposition "${URL}" 2>&1 $DEBUG_OFF || \
            ( printf "${RED_COLOR}${BOLD_TEXT}Failed to download file - aborting.\n" && exit 1)

          while ! gpg --list-secret-key | grep "$KEY_FINGERPRINT" 2>&1 $DEBUG_OFF; do
            printf "${PRIVATE_KEY}\n" | gpg --batch --import 2>&1 $DEBUG_OFF
          done

          echo "${PASSPHRASE}" | gpg --pinentry-mode loopback \
            --passphrase-fd 0  --decrypt-files "$HOME/enc/"*.pdf.gpg 2>&1 $DEBUG_OFF || \
            ( printf "${RED_COLOR}${BOLD_TEXT}Failed to decrypt file - aborting.\n" && exit 1 )

      - name: "OCR File(s)."
        run: |
          [ -f "$HOME/debug.sh" ] && . "$HOME/debug.sh"

          cd  "$HOME/enc"
          mkdir tmp output
          export TMPDIR=tmp

          for pdf_file in *.pdf; do
            parallel --tag -j 2 ocrmypdf --sidecar 'output/{}'.txt --deskew \
              --force-ocr --optimize 1 '{}' 'output/{}' ::: "${pdf_file}"
            echo "${pdf_file}" >> "${GITHUB_STEP_SUMMARY}"
          done

      - name: "Encrypt PDF File(s)."
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
          KEY_FINGERPRINT: ${{ secrets.KEY_FINGERPRINT }}
        run: |
          [ -f "$HOME/debug.sh" ] && . "$HOME/debug.sh"

          cd  "$HOME/enc"

          tar -C "$HOME/enc/output" -cf "output.tar.gz" . 2>&1 $DEBUG_OFF

          gpg --always-trust -er "${KEY_FINGERPRINT}" -o "output.tar.gz.gpg" "output.tar.gz" || \
            ( printf "${RED_COLOR}${BOLD_TEXT}Failed to encrypt file - aborting.\n" && exit 1)

      - name: "Upload File."
        run: |
          [ -f "$HOME/debug.sh" ] && . "$HOME/debug.sh"

          cd  "$HOME/enc"

          while ! curl -F "file=@output.tar.gz.gpg" https://file.io | jq '("link = "+.link)' >> "${GITHUB_STEP_SUMMARY}"
          do
            printf "${ORANGE_COLOR}${BOLD_TEXT}Failed to encrypt file - retrying.${UNSET_COLOR}\n"
          done
